{"version":3,"file":"static/js/movieDetailsPage-view.e7ab855b.chunk.js","mappings":"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","sources":["services/FilmsApi.js","views/MovieDetailsPage.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '2df0d61e4e977c645a20818274a83726';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function FetchTrending() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${KEY}`\n  );\n}\n\nexport function FetchFilmById(filmId) {\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${filmId}?api_key=${KEY}`);\n}\n\nexport function FetchFilmCast(filmId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${filmId}/credits?api_key=${KEY}`\n  );\n}\nexport function FetchFilmReviews(filmId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${filmId}/reviews?api_key=${KEY}`\n  );\n}\nexport function FetchFilmSearch(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${query}`\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { Route, useParams, useHistory, useLocation } from 'react-router-dom';\nimport * as Trending from '../services/FilmsApi';\nimport { NavLink, useRouteMatch } from 'react-router-dom';\n\nexport default function MovieDetailsPage() {\n  const { filmId } = useParams();\n  const [filmById, setfilmById] = useState(null);\n  const [filmCast, setfilmCast] = useState(null);\n  const [filmReviews, setfilmReviews] = useState(null);\n  const { url } = useRouteMatch();\n  const history = useHistory();\n  const location = useLocation();\n\n  useEffect(() => {\n    Trending.FetchFilmById(filmId).then(setfilmById);\n    Trending.FetchFilmCast(filmId).then(setfilmCast);\n    Trending.FetchFilmReviews(filmId).then(setfilmReviews);\n  }, [filmId]);\n\n  const onGoBack = () => {\n    history.push(location?.state?.from ?? '/');\n  };\n  return (\n    <>\n      <button type=\"button\" onClick={onGoBack}>\n        Назад\n      </button>\n      <>\n        {filmById && (\n          <div style={{ display: 'flex' }}>\n            {filmById.poster_path && (\n              <img\n                src={`https://image.tmdb.org/t/p/w500/${filmById.poster_path}`}\n                width={300}\n                height={400}\n                style={{ margin: '5px 20px 0 0' }}\n                alt=\"fotoFilm\"\n              />\n            )}\n            <div>\n              {filmById.title && (\n                <h2>\n                  {filmById.title}(\n                  {filmById.release_date && filmById.release_date.substr(0, 4)}\n                  {filmById.first_air_date &&\n                    filmById.first_air_date.substr(0, 4)}\n                  )\n                </h2>\n              )}\n              {filmById.name && (\n                <h2>\n                  {filmById.name}(\n                  {filmById.release_date && filmById.release_date.substr(0, 4)}\n                  {filmById.first_air_date &&\n                    filmById.first_air_date.substr(0, 4)}\n                  )\n                </h2>\n              )}\n              <h3>Overview</h3>\n              <p>{filmById.overview}</p>\n              {filmById && (\n                <>\n                  <h3>Genres</h3>\n                  {filmById.genres.map(item => {\n                    return `${item.name}  `;\n                  })}\n                </>\n              )}\n            </div>\n          </div>\n        )}\n        <hr />\n        {filmById ? (\n          <>\n            Addtional Information <br></br>\n            <ul>\n              <li key=\"1\">\n                <NavLink\n                  to={{\n                    pathname: `${url}/cast`,\n                    // в location.state в свойстві from  знаходиться обєкт locatin звідки ми прийшли\n                    // значить переписуємо туди значення з попередньої сторінки\n                    state: { from: location?.state?.from ?? '/' },\n                  }}\n                >\n                  Cast\n                </NavLink>\n              </li>\n              <li key=\"2\">\n                <NavLink\n                  to={{\n                    pathname: `${url}/reviews`,\n                    state: { from: location?.state?.from ?? '/' },\n                  }}\n                >\n                  Reviews\n                </NavLink>\n              </li>\n            </ul>\n          </>\n        ) : (\n          <p>We don't have addtional information</p>\n        )}\n        <hr />\n        <Route path={`${url}/cast`} exact>\n          {filmCast ? (\n            filmCast.cast.map(cast => (\n              <>\n                <img\n                  src={`https://image.tmdb.org/t/p/w500/${cast.profile_path}`}\n                  width={90}\n                  height={120}\n                  style={{ margin: '0 20px 0 0' }}\n                  alt=\"fotoAutor\"\n                />\n                <p>{cast.name}</p>\n                <p>Character: {cast.character}</p>\n              </>\n            ))\n          ) : (\n            <p>We don't have any casts for this movie</p>\n          )}\n        </Route>\n        <Route path={`${url}/reviews`} exact>\n          <>\n            {filmReviews && filmReviews.results.length > 0 ? (\n              <ul>\n                {filmReviews.results.map((review, index) => (\n                  <li key={index}>\n                    <h2>Author: {review.author}</h2>\n                    <p>{review.content}</p>\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p>We don't have any reviews for this movie</p>\n            )}\n          </>\n        </Route>\n      </>\n    </>\n  );\n}\n"],"names":["BASE_URL","KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","FetchTrending","FetchFilmById","filmId","FetchFilmCast","FetchFilmReviews","FetchFilmSearch","query","MovieDetailsPage","useParams","useState","filmById","setfilmById","filmCast","setfilmCast","filmReviews","setfilmReviews","useRouteMatch","history","useHistory","location","useLocation","useEffect","Trending","then","type","onClick","push","state","from","style","display","poster_path","src","width","height","margin","alt","title","release_date","substr","first_air_date","name","overview","genres","map","item","to","pathname","path","exact","cast","profile_path","character","results","length","review","index","author","content"],"sourceRoot":""}