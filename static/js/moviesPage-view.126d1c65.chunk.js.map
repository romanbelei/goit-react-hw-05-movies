{"version":3,"file":"static/js/moviesPage-view.126d1c65.chunk.js","mappings":"sPACA,EAA4B,8BAA5B,EAAuE,+BAAvE,EAAyH,qCAAzH,EAAsL,0CAAtL,EAAkP,oC,kBCWnO,SAASA,IACtB,IAAMC,GAAUC,EAAAA,EAAAA,MACVC,GAAWC,EAAAA,EAAAA,MACTC,GAAQC,EAAAA,EAAAA,MAARD,IACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,MAEAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACd,GAAwB,KAApBT,EAASU,OAAb,CAGA,IAAMC,EAAe,UAEnB,IAAIC,gBAAgBZ,EAASU,QAAQG,IAAI,gBAFtB,QAEkC,GACnDF,IAAoBN,GAAOS,EAAWH,MACzC,CAACX,EAAUF,EAASO,KAEvBI,EAAAA,EAAAA,YAAU,WACJF,GACgC,IAA9BA,EAAWQ,QAAQC,QACrBC,EAAAA,GAAAA,MAAY,wGAGf,CAACV,IAEJ,IAcMO,EAAa,SAAAI,GACjBC,EAAAA,GAAyBD,GAAGE,KAAKZ,IAGnC,OACE,iCACE,mBAAQa,UAAWC,EAAnB,UACE,kBAAMD,UAAWC,EAAcC,SAjBd,SAAAC,GAErB,GADAA,EAAEC,iBACmB,KAAjBpB,EAAMqB,OACR,OAAOT,EAAAA,GAAAA,MAAY,kHAGrBnB,EAAQ6B,MAAR,kBAAkB3B,GAAlB,IAA4BU,OAAO,SAAD,OAAWL,MAC7CS,EAAWT,IAUP,WACE,mBAAQuB,KAAK,SAASP,UAAWC,EAAjC,UACE,iBAAMD,UAAWC,EAAjB,uBAEF,kBACED,UAAWC,EACXM,KAAK,OACLC,KAAK,OACLC,YAAY,2BACZC,MAAO1B,EACP2B,SA/BW,SAAAR,GACnBlB,EAASkB,EAAES,cAAcF,MAAMG,wBAkC7B,wBACG3B,GACCA,EAAWQ,QAAQoB,KAAI,SAACC,EAAMC,GAAP,OACrB,yBACE,UAAC,KAAD,CACEC,GAAI,CACFC,SAAS,GAAD,OAAKrC,EAAL,YAAYkC,EAAKI,IACzBC,MAAO,CAAEC,KAAM1C,IAHnB,UAMGoC,EAAKO,MACLP,EAAKP,SARDQ,a,oLC3EfO,EAAW,+BACXC,EAAM,mCAAZ,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsC5C,EAAtC,+BAA4C,GAAI6C,EAAhD,+BAAyD,GAAzD,SACyBC,MAAM9C,EAAK6C,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOT,EAAuB,GAAD,OACxBF,EADwB,uCACeC,IAIvC,SAASW,EAAcC,GAC5B,OAAOX,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBa,EAAtB,oBAAwCZ,IAGhE,SAASa,EAAcD,GAC5B,OAAOX,EAAuB,GAAD,OACxBF,EADwB,kBACNa,EADM,4BACoBZ,IAG5C,SAASc,EAAiBF,GAC/B,OAAOX,EAAuB,GAAD,OACxBF,EADwB,kBACNa,EADM,4BACoBZ,IAG5C,SAASe,EAAgBvD,GAC9B,OAAOyC,EAAuB,GAAD,OACxBF,EADwB,iCACSC,EADT,kBACsBxC","sources":["webpack://react-homework-template/./src/components/MoviesPage/MoviesPage.module.css?564c","components/MoviesPage/MoviesPage.js","services/FilmsApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Searchbar\":\"MoviesPage_Searchbar__IcV0j\",\"SearchForm\":\"MoviesPage_SearchForm__kpN7l\",\"SearchFormButton\":\"MoviesPage_SearchFormButton__pBDYN\",\"SearchFormButtonLabel\":\"MoviesPage_SearchFormButtonLabel__q049z\",\"SearchFormInput\":\"MoviesPage_SearchFormInput__9qTli\"};","import React, { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport {\n  NavLink,\n  useRouteMatch,\n  useHistory,\n  useLocation,\n} from 'react-router-dom';\nimport * as Trending from '../../services/FilmsApi';\nimport s from './MoviesPage.module.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function Searchbar() {\n  const history = useHistory();\n  const location = useLocation();\n  const { url } = useRouteMatch();\n  const [query, setQuery] = useState('');\n  const [filmSearch, setFilmSearch] = useState('');\n\n  useEffect(() => {\n    if (location.search === '') {\n      return;\n    }\n    const queryFromString =\n      //зчитуємо з строки запиту параметр query\n      new URLSearchParams(location.search).get('query') ?? '';\n    if (queryFromString !== query) searhFetch(queryFromString);\n  }, [location, history, query]);\n\n  useEffect(() => {\n    if (filmSearch) {\n      if (filmSearch.results.length === 0) {\n        toast.error('Нічого не знайдено');\n      }\n    }\n  }, [filmSearch]);\n\n  const handleChange = e => {\n    setQuery(e.currentTarget.value.toLowerCase());\n  };\n\n  const handleOnSubmit = e => {\n    e.preventDefault();\n    if (query.trim() === '') {\n      return toast.error('Введіть назву Фільма');\n    }\n    //Добавляємо в силку query для того щоб можна було скопіювати та віддати ссилку)\n    history.push({ ...location, search: `query=${query}` });\n    searhFetch(query);\n  };\n\n  const searhFetch = q => {\n    Trending.FetchFilmSearch(q).then(setFilmSearch);\n  };\n\n  return (\n    <>\n      <header className={s.Searchbar}>\n        <form className={s.SearchForm} onSubmit={handleOnSubmit}>\n          <button type=\"submit\" className={s.SearchFormButton}>\n            <span className={s.SearchFormButtonLabel}>Search</span>\n          </button>\n          <input\n            className={s.SearchFormInput}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Search images and photos\"\n            value={query}\n            onChange={handleChange}\n          />\n        </form>\n      </header>\n      <ul>\n        {filmSearch &&\n          filmSearch.results.map((film, index) => (\n            <li key={index}>\n              <NavLink\n                to={{\n                  pathname: `${url}/${film.id}`,\n                  state: { from: location },\n                }}\n              >\n                {film.title}\n                {film.name}\n              </NavLink>\n            </li>\n          ))}\n      </ul>\n    </>\n  );\n}\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '2df0d61e4e977c645a20818274a83726';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function FetchTrending() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${KEY}`\n  );\n}\n\nexport function FetchFilmById(filmId) {\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${filmId}?api_key=${KEY}`);\n}\n\nexport function FetchFilmCast(filmId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${filmId}/credits?api_key=${KEY}`\n  );\n}\nexport function FetchFilmReviews(filmId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${filmId}/reviews?api_key=${KEY}`\n  );\n}\nexport function FetchFilmSearch(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${query}`\n  );\n}\n"],"names":["Searchbar","history","useHistory","location","useLocation","url","useRouteMatch","useState","query","setQuery","filmSearch","setFilmSearch","useEffect","search","queryFromString","URLSearchParams","get","searhFetch","results","length","toast","q","Trending","then","className","s","onSubmit","e","preventDefault","trim","push","type","name","placeholder","value","onChange","currentTarget","toLowerCase","map","film","index","to","pathname","id","state","from","title","BASE_URL","KEY","fetchWithErrorHandling","config","fetch","response","ok","json","Promise","reject","Error","FetchTrending","FetchFilmById","filmId","FetchFilmCast","FetchFilmReviews","FetchFilmSearch"],"sourceRoot":""}